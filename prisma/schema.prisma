generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      String   @default("user")
  companyId String?
  createdAt DateTime @default(now())
  company   Company? @relation(fields: [companyId], references: [id])
}

model Company {
  id                   String           @id @default(uuid())
  companyName          String
  shortName            String
  license              String
  inn                  String           @unique @db.Char(10)
  kpp                  String           @db.Char(9)
  ogrn                 String?
  legalAddress         String
  actualAddress        String?
  region               String
  city                 String           @default("")
  bank                 String
  account              String           @db.Char(20)
  bik                  String           @db.Char(9)
  correspondentAccount String           @db.Char(20)
  directorSurname      String
  directorName         String
  directorPatronymic   String?
  accountantSurname    String?
  accountantName       String?
  accountantPatronymic String?
  phone                String
  email                String           @unique
  website              String?
  whoIssuedLicense     String?
  whenIssuedLicense    DateTime?
  gibddDepartmentId    String?
  createdAt            DateTime         @default(now())
  cars                 Car[]
  gibddDepartment      GibddDepartment? @relation(fields: [gibddDepartmentId], references: [id])
  groups               Group[]
  students             Student[]
  teachers             Teacher[]
  users                User[]
}

model Teacher {
  id               String    @id @default(uuid())
  lastName         String
  firstName        String
  middleName       String?
  activityType     String    @default("theory")
  birthDate        DateTime?
  birthPlace       String?
  address          String?
  licenseSeries    String?
  licenseNumber    String?
  licenseIssueDate DateTime?
  snils            String?
  phone            String?
  companyId        String
  createdBy        String
  createdAt        DateTime  @default(now())
  cars             Car[]
  company          Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  practiceGroups   Group[]   @relation("PracticeTeachers")
  theoryGroups     Group[]   @relation("TheoryTeachers")
}

model Car {
  id              String   @id @default(uuid())
  carModel        String
  carTransmission String
  carNumber       String
  literalMarking  String
  teacherId       String
  companyId       String
  createdAt       DateTime @default(now())
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  teacher         Teacher  @relation(fields: [teacherId], references: [id], onDelete: SetNull)
}

model Group {
  id                String    @id @default(uuid())
  groupNumber       String    @unique
  category          String
  startTrainingDate DateTime
  endTrainingDate   DateTime
  isActive          Boolean   @default(true)
  companyId         String
  createdAt         DateTime  @default(now())
  company           Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  students          Student[]
  practiceTeachers  Teacher[] @relation("PracticeTeachers")
  theoryTeachers    Teacher[] @relation("TheoryTeachers")
}

model Student {
  id                   String           @id @default(uuid())
  lastName             String
  firstName            String
  middleName           String?
  gender               String?
  phone                String
  birthDate            DateTime
  birthPlace           String?
  registrationAddress  String?
  actualAddress        String?
  documentType         String?
  documentIssuer       String?
  documentCode         String?
  documentSeries       String?
  documentNumber       String?
  documentIssueDate    DateTime?
  medicalSeries        String?
  medicalNumber        String?
  medicalIssueDate     DateTime?
  medicalIssuer        String?
  license              String?
  region               String?
  medicalRestriction   String?
  allowedCategories    String?
  trainingCost         Decimal
  snils                String?
  groupId              String
  companyId            String
  createdAt            DateTime         @default(now())
  studentNumber        String
  licenseSeries        String?
  addressRegion        String?
  apartment            String?
  building             String?
  city                 String?
  country              String?
  house                String?
  street               String?
  education            String?
  placeOfWork          String?
  certificateIssueDate DateTime?
  certificateNumber    Decimal?
  telegramId           String?          @unique
  drivingSessions      DrivingSession[]
  payments             Payment[]
  company              Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  group                Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Payment {
  id          String   @id @default(uuid())
  studentId   String
  amount      Decimal
  paymentDate DateTime @default(now())
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model DrivingSession {
  id        String   @id @default(uuid())
  studentId String
  date      DateTime
  createdAt DateTime @default(now())
  slot      String?
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model GibddDepartment {
  id             String    @id @default(uuid())
  departmentName String
  officerName    String?
  officerRank    String?
  district       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  companies      Company[]
}
