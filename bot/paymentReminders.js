import { PrismaClient } from '@prisma/client';
import { Bot, InlineKeyboard } from 'grammy';
import { sendTelegramMessage } from './sendTelegramMessage.js';

const prisma = new PrismaClient();
const bot = new Bot(process.env.TELEGRAM_BOT_TOKEN);
const dateFirstReminder = 8;
const dateSecondReminder = 23;

const adminChatIds =
  process.env.TELEGRAM_ADMIN_CHAT_ID?.split(',')
    .map((id) => id.trim())
    .filter(Boolean) || [];

async function main() {
  for (const adminId of adminChatIds) {
    try {
      await bot.api.sendMessage(adminId, '‚öôÔ∏è –°–∫—Ä–∏–ø—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –æ–ø–ª–∞—Ç–µ –∑–∞–ø—É—â–µ–Ω');
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ ${adminId} –æ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞:`, err);
    }
  }

  const today = new Date();
  const day = today.getDate();
  if (![dateFirstReminder, dateSecondReminder].includes(day)) return;

  const students = await prisma.student.findMany({
    where: {
      telegramId: { not: null },
      group: {
        isActive: true,
      },
    },
    include: {
      payments: true,
      group: true,
    },
  });

  const reportLines = [];

  for (const student of students) {
    const paid = student.payments.reduce(
      (acc, payment) => acc + parseFloat(payment.amount.toString()),
      0,
    );
    const totalCost = parseFloat(student.trainingCost.toString());
    const totalDebt = totalCost - paid;

    if (totalDebt <= 0) continue;

    const remaining = totalDebt < 7500 ? totalDebt : 7500;
    const formattedRemaining = remaining.toLocaleString('ru-RU');
    const formattedDebt = totalDebt.toLocaleString('ru-RU');

    const paymentLine =
      remaining >= 7500
        ? `–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ <b>${formattedRemaining} ‚ÇΩ</b>`
        : `–æ–ø–ª–∞—Ç–∏—Ç–µ <b>${formattedRemaining} ‚ÇΩ</b>`;

    const message = `üí∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ</b>\n${paymentLine} –ø–æ –æ–±—É—á–µ–Ω–∏—é.\n\n–û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ:\nüìû –°–ë–ü –ø–æ –Ω–æ–º–µ—Ä—É: +7 921 690-19-75\nüí≥ –Ω–∞ –∫–∞—Ä—Ç—É –°–±–µ—Ä–±–∞–Ω–∫–∞: 2202 2083 2509 3095\nüë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–≥–æ—Ä—å –ï–≤–≥–µ–Ω—å–µ–≤–∏—á –¢.\n\n<b>–û–±—â–∏–π –¥–æ–ª–≥: ${formattedDebt} ‚ÇΩ</b>\n\n‚ùóÔ∏è –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä <b>–í–∞—à–µ–≥–æ</b> –¥–æ–≥–æ–≤–æ—Ä–∞.\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏–ª</b> –Ω–∏–∂–µ. –°–ø–∞—Å–∏–±–æ!`;

    await sendTelegramMessage(student.telegramId, message, {
      parse_mode: 'HTML',
      reply_markup: new InlineKeyboard().text('‚úÖ –û–ø–ª–∞—Ç–∏–ª', `payment_done_${student.id}`),
    });

    const fullName = `${student.lastName} ${student.firstName} ${student.middleName ?? ''}`.trim();
    const groupNumber = student.group?.groupNumber || '‚Äî';
    reportLines.push(`‚Ä¢ ${fullName} ‚Äî #${groupNumber} ‚Äî –î–æ–ª–≥: ${formattedDebt} ‚ÇΩ`);
  }

  if (reportLines.length > 0) {
    const reportMessage = `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ:\n\n${reportLines.join('\n\n')}`;
    for (const adminId of adminChatIds) {
      try {
        await bot.api.sendMessage(adminId, reportMessage);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É ${adminId}:`, error);
      }
    }
  }
}

main()
  .catch(console.error)
  .finally(async () => {
    await prisma.$disconnect();
    process.exit(0);
  });
