import { PrismaClient } from '@prisma/client';
import { Bot, InlineKeyboard } from 'grammy';

const bot = new Bot(process.env.TELEGRAM_BOT_TOKEN);
const prisma = new PrismaClient();
const adminChatIds = process.env.TELEGRAM_ADMIN_CHAT_ID?.split(',')
  .map((id) => id.trim())
  .filter(Boolean);

// /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ?start=studentId
bot.command('start', async (ctx) => {
  const chatId = ctx.chat.id.toString();
  const studentId = ctx.match;

  if (!studentId) {
    await ctx.reply('‚ùóÔ∏è–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥ –∏–∑ –î–æ–≥–æ–≤–æ—Ä–∞.');
    return;
  }

  try {
    const student = await prisma.student.findUnique({
      where: { id: studentId },
      include: { group: true },
    });

    if (!student) {
      await ctx.reply('üòï –ö–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∞–≤—Ç–æ—à–∫–æ–ª—É.');
      return;
    }

    await prisma.student.update({
      where: { id: student.id },
      data: { telegramId: chatId },
    });

    const fullName = `${student.lastName} ${student.firstName} ${student.middleName ?? ''}`.trim();
    const groupNumber = student.group?.groupNumber ?? '‚Äî';
    const activationMessage = `üì≤ –°—Ç—É–¥–µ–Ω—Ç <b>${fullName}</b> –∏–∑ –≥—Ä—É–ø–ø—ã ‚Ññ <b>${groupNumber}</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª Telegram-–±–æ—Ç.`;

    await Promise.all(
      adminChatIds.map(async (adminId) => {
        try {
          await bot.api.sendMessage(adminId, activationMessage, { parse_mode: 'HTML' });
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ ${adminId}:`, error);
        }
      }),
    );

    // –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
    const message = `
    üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>${student.lastName} ${student.firstName}</b>!
    
    ‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ <b>–ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>.
    
    ‚ÑπÔ∏è –í—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ ‚Ññ <b>${student.group.groupNumber}</b>, –Ω–∞—á–∞–ª–æ –∑–∞–Ω—è—Ç–∏–π ‚Äî <b>${student.group.startTrainingDate.toLocaleDateString('ru-RU')} –≥</b>.
    üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>${student.trainingCost.toFixed(2).toLocaleString('ru-RU')} ‚ÇΩ</b>.
    
    üì¨ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:
    ‚Ä¢ üöó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏—è—Ö –ø–æ –≤–æ–∂–¥–µ–Ω–∏—é
    ‚Ä¢ üí∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ ‚Äî <b>8</b> –∏ <b>23</b> —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞

    ‚ùó –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å <b>–¥–æ –ø–æ–ª–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∫—É—Ä—Å–∞ –∏–ª–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è</b>.
    `;

    const keyboard = new InlineKeyboard()
      .text('üí≥ –£–∑–Ω–∞—Ç—å –¥–æ–ª–≥ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ', 'check_debt')
      .row()
      .text('üöò –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è –ø–æ –≤–æ–∂–¥–µ–Ω–∏—é', 'view_sessions');

    await ctx.reply(message, {
      parse_mode: 'HTML',
      reply_markup: keyboard,
    });
  } catch (err) {
    if (err.code === 'P2002' && err.meta?.target?.includes('telegramId')) {
      await ctx.reply(
        '‚ö†Ô∏è –≠—Ç–æ—Ç Telegram-–∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É.\n\n' +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å –¥—Ä—É–≥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –≤ –∞–≤—Ç–æ—à–∫–æ–ª—É.',
      );
    } else {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Telegram ID —Å—Ç—É–¥–µ–Ω—Ç–∞:', err);
      await ctx.reply('üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∞–≤—Ç–æ—à–∫–æ–ª—É.');
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–∑–Ω–∞—Ç—å –¥–æ–ª–≥"
bot.callbackQuery('check_debt', async (ctx) => {
  const telegramId = ctx.chat.id.toString();

  try {
    const student = await prisma.student.findUnique({
      where: { telegramId },
      include: {
        payments: true,
        group: true,
      },
    });

    if (!student) {
      await ctx.answerCallbackQuery({ text: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω üòî', show_alert: true });
      return;
    }

    const trainingCost = student.trainingCost.toNumber();
    const totalPaid = student.payments.reduce((sum, p) => sum + p.amount.toNumber(), 0);
    const debt = Math.max(trainingCost - totalPaid, 0);

    await ctx.answerCallbackQuery();

    if (debt === 0) {
      await ctx.reply(
        `‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏. –û–ø–ª–∞—Ç–∞ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ ‚Ññ ${student.group.groupNumber} –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ. –°–ø–∞—Å–∏–±–æ!\n\n‚ÑπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.`,
      );
    } else {
      await ctx.reply(`üí∞ –í–∞—à –¥–æ–ª–≥ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ: ${debt} ‚ÇΩ`);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–ª–≥–∞:', err);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–ª–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–∑–∞–Ω—è—Ç–∏—è –ø–æ –≤–æ–∂–¥–µ–Ω–∏—é"
bot.callbackQuery('view_sessions', async (ctx) => {
  const telegramId = ctx.chat.id.toString();

  try {
    const student = await prisma.student.findUnique({
      where: { telegramId },
      include: {
        drivingSessions: true,
      },
    });

    if (!student) {
      await ctx.answerCallbackQuery({ text: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω üòî', show_alert: true });
      return;
    }

    const sessions = student.drivingSessions
      .filter((session) => session.date >= new Date())
      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
      .slice(0, 5); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –∑–∞–Ω—è—Ç–∏–π

    if (sessions.length === 0) {
      await ctx.answerCallbackQuery();
      await ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –ø–æ –≤–æ–∂–¥–µ–Ω–∏—é.');
      return;
    }

    const message = sessions
      .map((s, i) => {
        const date = new Date(s.date).toLocaleDateString('ru-RU', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
        });
        const time = s.slot || '–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
        return `#${i + 1} ‚Äî üóì ${date}, ‚è∞ ${time}`;
      })
      .join('\n');

    await ctx.answerCallbackQuery();
    await ctx.reply(`üöò –í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –≤–æ–∂–¥–µ–Ω–∏—è:\n\n${message}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π:', err);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–æ–ø–ª–∞—Ç–∏–ª"
bot.callbackQuery(/^payment_done_(.+)$/, async (ctx) => {
  const studentId = ctx.match[1];

  try {
    const student = await prisma.student.findUnique({
      where: { id: studentId },
      include: { group: true, payments: true },
    });

    if (!student) {
      await ctx.answerCallbackQuery({ text: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', show_alert: true });
      return;
    }

    await ctx.editMessageText(
      `‚úÖ –°–ø–∞—Å–∏–±–æ, ${student.firstName}! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ.\n\n–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –≤–Ω–µ—Å–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.`,
    );

    const nameText =
      `${student.firstName} ${student.middleName ?? ''} ${student.lastName[0]}.`.trim();
    const groupNumber = student.group?.groupNumber ?? '‚Äî';
    const adminKeyboard = new InlineKeyboard().text(
      '‚úÖ –í–Ω–µ—Å–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É',
      `confirm_payment_${student.id}`,
    );

    await Promise.all(
      adminChatIds.map(async (id) => {
        try {
          await bot.api.sendMessage(
            id,
            `üíº –°—Ç—É–¥–µ–Ω—Ç <b>${nameText}</b> –∏–∑ –≥—Ä—É–ø–ø—ã ‚Ññ <b>${groupNumber}</b> –æ—Ç–º–µ—Ç–∏–ª –æ–ø–ª–∞—Ç—É.`,
            { parse_mode: 'HTML', reply_markup: adminKeyboard },
          );
        } catch (err) {
          console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ${id}:`, err);
        }
      }),
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã:', error);
    await ctx.answerCallbackQuery({ text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.', show_alert: true });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–Ω–µ—Å–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É"
bot.callbackQuery(/^confirm_payment_(.+)$/, async (ctx) => {
  const studentId = ctx.match[1];

  try {
    const student = await prisma.student.findUnique({
      where: { id: studentId },
      include: {
        group: true,
        payments: true,
      },
    });

    if (!student?.telegramId) {
      await ctx.answerCallbackQuery({
        text: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç Telegram ID.',
        show_alert: true,
      });
      return;
    }

    const trainingCost = student.trainingCost.toNumber();
    const totalPaid = student.payments.reduce((sum, p) => sum + p.amount.toNumber(), 0);
    const debt = Math.max(trainingCost - totalPaid, 0);

    const debtMessage =
      debt === 0
        ? '‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞ –∫—É—Ä—Å –≤–Ω–µ—Å–µ–Ω–∞ –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ. –°–ø–∞—Å–∏–±–æ!\n\n‚ÑπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å.'
        : `‚ÑπÔ∏è –ü–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤ —Å–∏—Å—Ç–µ–º—É, –≤–∞—à–∞ <b>–æ—Å—Ç–∞–≤—à–∞—è—Å—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ</b>: <b>${debt} ‚ÇΩ</b>.`;

    await bot.api.sendMessage(
      student.telegramId,
      `‚úÖ –ú—ã –≤–Ω–µ—Å–ª–∏ –≤–∞—à—É –æ–ø–ª–∞—Ç—É –≤ —Å–∏—Å—Ç–µ–º—É.\n\n${debtMessage}`,
      { parse_mode: 'HTML' },
    );

    const fullName = `${student.lastName} ${student.firstName} ${student.middleName ?? ''}`.trim();
    const groupNum = student.group?.groupNumber ?? '‚Äî';

    await ctx.editMessageText(
      `‚òëÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É: <b>${fullName}</b> (–≥—Ä—É–ø–ø–∞ ‚Ññ <b>${groupNum}</b>)`,
      { parse_mode: 'HTML' },
    );

    await ctx.answerCallbackQuery();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã:', error);
    await ctx.answerCallbackQuery({ text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.', show_alert: true });
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
