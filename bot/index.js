import { PrismaClient } from '@prisma/client';
import { Bot, InlineKeyboard } from 'grammy';

const bot = new Bot(process.env.TELEGRAM_BOT_TOKEN);
const prisma = new PrismaClient();

// /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ?start=studentId
bot.command('start', async (ctx) => {
  const chatId = ctx.chat.id.toString();
  const studentId = ctx.match;

  if (!studentId) {
    await ctx.reply(
      '‚ùóÔ∏è–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥ –∏–∑ –ó–∞—è–≤–ª–µ–Ω–∏—è-–∞–Ω–∫–µ—Ç—ã.',
    );
    return;
  }

  try {
    const student = await prisma.student.findUnique({
      where: { id: studentId },
    });

    if (!student) {
      await ctx.reply('üòï –ö–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∞–≤—Ç–æ—à–∫–æ–ª—É.');
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º Telegram ID —Å—Ç—É–¥–µ–Ω—Ç–∞
    await prisma.student.update({
      where: { id: student.id },
      data: { telegramId: chatId },
    });

    const message = `
üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>${student.lastName} ${student.firstName}</b>!

‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ <b>–ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>.

–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:
üöó –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –≤–æ–∂–¥–µ–Ω–∏—é  
üí∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ ‚Äî <b>10</b> –∏ <b>25</b> —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
    `;

    const keyboard = new InlineKeyboard()
      .text('üí≥ –£–∑–Ω–∞—Ç—å –¥–æ–ª–≥ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ', 'check_debt')
      .row()
      .text('üöò –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è –ø–æ –≤–æ–∂–¥–µ–Ω–∏—é', 'view_sessions');

    await ctx.reply(message, {
      parse_mode: 'HTML',
      reply_markup: keyboard,
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Telegram ID —Å—Ç—É–¥–µ–Ω—Ç–∞:', err);
    await ctx.reply('üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∞–≤—Ç–æ—à–∫–æ–ª—É.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–∑–Ω–∞—Ç—å –¥–æ–ª–≥"
bot.callbackQuery('check_debt', async (ctx) => {
  const telegramId = ctx.chat.id.toString();

  try {
    const student = await prisma.student.findUnique({
      where: { telegramId },
      include: {
        payments: true,
      },
    });

    if (!student) {
      await ctx.answerCallbackQuery({ text: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω üòî', show_alert: true });
      return;
    }

    const trainingCost = student.trainingCost.toNumber();
    const totalPaid = student.payments.reduce((sum, p) => sum + p.amount.toNumber(), 0);
    const debt = Math.max(trainingCost - totalPaid, 0);

    await ctx.answerCallbackQuery(); // –ó–∞–∫—Ä—ã—Ç—å "loading..."

    await ctx.reply(`üí∞ –í–∞—à –¥–æ–ª–≥ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ: ${debt} ‚ÇΩ`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–ª–≥–∞:', err);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–ª–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–∑–∞–Ω—è—Ç–∏—è –ø–æ –≤–æ–∂–¥–µ–Ω–∏—é"
bot.callbackQuery('view_sessions', async (ctx) => {
  const telegramId = ctx.chat.id.toString();

  try {
    const student = await prisma.student.findUnique({
      where: { telegramId },
      include: {
        drivingSessions: true,
      },
    });

    if (!student) {
      await ctx.answerCallbackQuery({ text: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω üòî', show_alert: true });
      return;
    }

    const sessions = student.drivingSessions
      .filter((session) => session.date >= new Date())
      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
      .slice(0, 5); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –∑–∞–Ω—è—Ç–∏–π

    if (sessions.length === 0) {
      await ctx.answerCallbackQuery();
      await ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –ø–æ –≤–æ–∂–¥–µ–Ω–∏—é.');
      return;
    }

    const message = sessions
      .map((s, i) => {
        const date = new Date(s.date).toLocaleDateString('ru-RU', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
        });
        const time = s.slot || '–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
        return `#${i + 1} ‚Äî üóì ${date}, ‚è∞ ${time}`;
      })
      .join('\n');

    await ctx.answerCallbackQuery();
    await ctx.reply(`üöò –í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è:\n\n${message}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π:', err);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.');
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
